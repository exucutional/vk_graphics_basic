#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

#include "common.h"

layout( local_size_x = 32 ) in;

layout( push_constant ) uniform params {
  uint particlesMaxCount;
  uint particlesSpawnMaxCount;
  float particlesLifetime;
  float particlesVelocityScale;
} PushConstant;

layout(std430, binding = 0) buffer ParticleBuf
{
    Particle particles[];
};

layout(std430, binding = 1) buffer ParticlesSpawnCountBuf
{
    uint particlesSpawnCount;
};

void main() 
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx < PushConstant.particlesMaxCount)
    {
        if (particles[idx].time == 0.0f)
        {
            uint spawnCount = atomicAdd(particlesSpawnCount, 1);
            if (spawnCount < PushConstant.particlesSpawnMaxCount)
            {
              particles[idx].velocity = PushConstant.particlesVelocityScale*normalize(particles[idx].velocity);
              particles[idx].position = vec2(0.0f);//vec2(idx % 2 == 0 ? 5.0f : -5.0f, 0.0f);
              particles[idx].time = PushConstant.particlesLifetime;
            }
        }
    }
}
