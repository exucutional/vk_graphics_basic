#version 430
#extension GL_GOOGLE_include_directive : require

#include "common.h"

layout( local_size_x = 32 ) in;

layout( push_constant ) uniform params {
  mat4 mModel;
  Plane left;
  Plane right;
  Plane top;
  Plane bottom;
  vec4 bboxmin;
  vec4 bboxmax;
  uint instanceCount;
} PushConstant;

layout(std430, binding = 0) buffer InstanceVisibleDataCount
{
    uint InstanceVisibleCount;
};

layout(std430, binding = 1) buffer InstanceVisibleDataIndexes
{
    uint InstanceIndexes[];
};

bool isVisiblePlane(Plane plane, vec4 bboxmin, vec4 bboxmax)
{
    float w     = -dot(plane.pos, plane.norm);
    vec4 bboxc  = (bboxmax+bboxmin)*0.5f;
    vec4 extent = bboxmax-bboxc;
    float r     = extent.x*abs(plane.norm.x)+extent.y*abs(plane.norm.y)+extent.z*abs(plane.norm.z);
    return dot(plane.norm, bboxc)+w <= r;
}

void main()  
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx < PushConstant.instanceCount)
    {
        mat4 instanceMatrix = PushConstant.mModel;
        float translateX    = (int(idx)/100-50)*2;
        float translateY    = (mod(int(idx), 100)-50)*2;
        instanceMatrix[3].x += translateX;
        instanceMatrix[3].y += translateY;
        vec4 bboxmin        = instanceMatrix*PushConstant.bboxmin;
        vec4 bboxmax        = instanceMatrix*PushConstant.bboxmax;
        if (isVisiblePlane(PushConstant.left, bboxmin, bboxmax)
            && isVisiblePlane(PushConstant.right, bboxmin, bboxmax)
            && isVisiblePlane(PushConstant.top, bboxmin, bboxmax)
            && isVisiblePlane(PushConstant.bottom, bboxmin, bboxmax))
        {
            uint index = atomicAdd(InstanceVisibleCount, 1);
            InstanceIndexes[index] = idx;
        }
    }
}
